/*
 * This file is generated by jOOQ.
 */
package com.march.jooq.model.tables;


import com.march.jooq.model.Indexes;
import com.march.jooq.model.Keys;
import com.march.jooq.model.Lexicon;
import com.march.jooq.model.tables.records.LangsRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Langs extends TableImpl<LangsRecord> {

    private static final long serialVersionUID = -1467268865;

    /**
     * The reference instance of <code>lexicon.langs</code>
     */
    public static final Langs LANGS = new Langs();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LangsRecord> getRecordType() {
        return LangsRecord.class;
    }

    /**
     * The column <code>lexicon.langs.lang_id</code>.
     */
    public final TableField<LangsRecord, Integer> LANG_ID = createField("lang_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>lexicon.langs.lang_name</code>.
     */
    public final TableField<LangsRecord, String> LANG_NAME = createField("lang_name", org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * Create a <code>lexicon.langs</code> table reference
     */
    public Langs() {
        this(DSL.name("langs"), null);
    }

    /**
     * Create an aliased <code>lexicon.langs</code> table reference
     */
    public Langs(String alias) {
        this(DSL.name(alias), LANGS);
    }

    /**
     * Create an aliased <code>lexicon.langs</code> table reference
     */
    public Langs(Name alias) {
        this(alias, LANGS);
    }

    private Langs(Name alias, Table<LangsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Langs(Name alias, Table<LangsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Langs(Table<O> child, ForeignKey<O, LangsRecord> key) {
        super(child, key, LANGS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Lexicon.LEXICON;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.LANGS_LANG_NAME, Indexes.LANGS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<LangsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_LANGS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<LangsRecord> getPrimaryKey() {
        return Keys.KEY_LANGS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<LangsRecord>> getKeys() {
        return Arrays.<UniqueKey<LangsRecord>>asList(Keys.KEY_LANGS_PRIMARY, Keys.KEY_LANGS_LANG_NAME);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Langs as(String alias) {
        return new Langs(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Langs as(Name alias) {
        return new Langs(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Langs rename(String name) {
        return new Langs(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Langs rename(Name name) {
        return new Langs(name, null);
    }
}
