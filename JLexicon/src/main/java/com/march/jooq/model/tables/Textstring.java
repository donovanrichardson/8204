/*
 * This file is generated by jOOQ.
 */
package com.march.jooq.model.tables;


import com.march.jooq.model.Indexes;
import com.march.jooq.model.Keys;
import com.march.jooq.model.Lexicon;
import com.march.jooq.model.tables.records.TextstringRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Textstring extends TableImpl<TextstringRecord> {

    private static final long serialVersionUID = 426412175;

    /**
     * The reference instance of <code>lexicon.textstring</code>
     */
    public static final Textstring TEXTSTRING = new Textstring();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TextstringRecord> getRecordType() {
        return TextstringRecord.class;
    }

    /**
     * The column <code>lexicon.textstring.word_id</code>.
     */
    public final TableField<TextstringRecord, Integer> WORD_ID = createField("word_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>lexicon.textstring.word</code>.
     */
    public final TableField<TextstringRecord, String> WORD = createField("word", org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>lexicon.textstring.doc_id</code>.
     */
    public final TableField<TextstringRecord, Integer> DOC_ID = createField("doc_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>lexicon.textstring.tstamp</code>.
     */
    public final TableField<TextstringRecord, Timestamp> TSTAMP = createField("tstamp", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>lexicon.textstring.left_continuance</code>.
     */
    public final TableField<TextstringRecord, Byte> LEFT_CONTINUANCE = createField("left_continuance", org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>lexicon.textstring.right_continuance</code>.
     */
    public final TableField<TextstringRecord, Byte> RIGHT_CONTINUANCE = createField("right_continuance", org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "");

    /**
     * Create a <code>lexicon.textstring</code> table reference
     */
    public Textstring() {
        this(DSL.name("textstring"), null);
    }

    /**
     * Create an aliased <code>lexicon.textstring</code> table reference
     */
    public Textstring(String alias) {
        this(DSL.name(alias), TEXTSTRING);
    }

    /**
     * Create an aliased <code>lexicon.textstring</code> table reference
     */
    public Textstring(Name alias) {
        this(alias, TEXTSTRING);
    }

    private Textstring(Name alias, Table<TextstringRecord> aliased) {
        this(alias, aliased, null);
    }

    private Textstring(Name alias, Table<TextstringRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Textstring(Table<O> child, ForeignKey<O, TextstringRecord> key) {
        super(child, key, TEXTSTRING);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Lexicon.LEXICON;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TEXTSTRING_DOC_TEXTSTRING_FK, Indexes.TEXTSTRING_PRIMARY, Indexes.TEXTSTRING_WORD_TEXTSTRING_FK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<TextstringRecord, Integer> getIdentity() {
        return Keys.IDENTITY_TEXTSTRING;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TextstringRecord> getPrimaryKey() {
        return Keys.KEY_TEXTSTRING_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TextstringRecord>> getKeys() {
        return Arrays.<UniqueKey<TextstringRecord>>asList(Keys.KEY_TEXTSTRING_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<TextstringRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<TextstringRecord, ?>>asList(Keys.WORD_TEXTSTRING_FK, Keys.DOC_TEXTSTRING_FK);
    }

    public Words words() {
        return new Words(this, Keys.WORD_TEXTSTRING_FK);
    }

    public Docs docs() {
        return new Docs(this, Keys.DOC_TEXTSTRING_FK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Textstring as(String alias) {
        return new Textstring(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Textstring as(Name alias) {
        return new Textstring(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Textstring rename(String name) {
        return new Textstring(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Textstring rename(Name name) {
        return new Textstring(name, null);
    }
}
