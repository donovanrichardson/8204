/*
 * This file is generated by jOOQ.
 */
package com.march.jooq.model.tables;


import com.march.jooq.model.Indexes;
import com.march.jooq.model.Keys;
import com.march.jooq.model.Lexicon;
import com.march.jooq.model.tables.records.WordsRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Words extends TableImpl<WordsRecord> {

    private static final long serialVersionUID = 259486645;

    /**
     * The reference instance of <code>lexicon.words</code>
     */
    public static final Words WORDS = new Words();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<WordsRecord> getRecordType() {
        return WordsRecord.class;
    }

    /**
     * The column <code>lexicon.words.word</code>.
     */
    public final TableField<WordsRecord, String> WORD = createField("word", org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>lexicon.words.frequency</code>.
     */
    public final TableField<WordsRecord, Integer> FREQUENCY = createField("frequency", org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.inline("1", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * Create a <code>lexicon.words</code> table reference
     */
    public Words() {
        this(DSL.name("words"), null);
    }

    /**
     * Create an aliased <code>lexicon.words</code> table reference
     */
    public Words(String alias) {
        this(DSL.name(alias), WORDS);
    }

    /**
     * Create an aliased <code>lexicon.words</code> table reference
     */
    public Words(Name alias) {
        this(alias, WORDS);
    }

    private Words(Name alias, Table<WordsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Words(Name alias, Table<WordsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Words(Table<O> child, ForeignKey<O, WordsRecord> key) {
        super(child, key, WORDS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Lexicon.LEXICON;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.WORDS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<WordsRecord> getPrimaryKey() {
        return Keys.KEY_WORDS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<WordsRecord>> getKeys() {
        return Arrays.<UniqueKey<WordsRecord>>asList(Keys.KEY_WORDS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Words as(String alias) {
        return new Words(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Words as(Name alias) {
        return new Words(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Words rename(String name) {
        return new Words(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Words rename(Name name) {
        return new Words(name, null);
    }
}
