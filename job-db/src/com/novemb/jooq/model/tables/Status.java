/*
 * This file is generated by jOOQ.
 */
package novemb.jooq.model.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import novemb.jooq.model.Indexes;
import novemb.jooq.model.Jobs;
import novemb.jooq.model.Keys;
import novemb.jooq.model.tables.records.StatusRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Status extends TableImpl<StatusRecord> {

    private static final long serialVersionUID = -1200360098;

    /**
     * The reference instance of <code>jobs.status</code>
     */
    public static final Status STATUS = new Status();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StatusRecord> getRecordType() {
        return StatusRecord.class;
    }

    /**
     * The column <code>jobs.status.status_id</code>.
     */
    public final TableField<StatusRecord, UInteger> STATUS_ID = createField("status_id", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>jobs.status.job_id</code>.
     */
    public final TableField<StatusRecord, UInteger> JOB_ID = createField("job_id", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>jobs.status.type</code>.
     */
    public final TableField<StatusRecord, UInteger> TYPE = createField("type", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>jobs.status.as_of</code>.
     */
    public final TableField<StatusRecord, Timestamp> AS_OF = createField("as_of", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>jobs.status.notes</code>.
     */
    public final TableField<StatusRecord, String> NOTES = createField("notes", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>jobs.status</code> table reference
     */
    public Status() {
        this(DSL.name("status"), null);
    }

    /**
     * Create an aliased <code>jobs.status</code> table reference
     */
    public Status(String alias) {
        this(DSL.name(alias), STATUS);
    }

    /**
     * Create an aliased <code>jobs.status</code> table reference
     */
    public Status(Name alias) {
        this(alias, STATUS);
    }

    private Status(Name alias, Table<StatusRecord> aliased) {
        this(alias, aliased, null);
    }

    private Status(Name alias, Table<StatusRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Status(Table<O> child, ForeignKey<O, StatusRecord> key) {
        super(child, key, STATUS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Jobs.JOBS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.STATUS_JOB_ID, Indexes.STATUS_PRIMARY, Indexes.STATUS_TYPE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<StatusRecord, UInteger> getIdentity() {
        return Keys.IDENTITY_STATUS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<StatusRecord> getPrimaryKey() {
        return Keys.KEY_STATUS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<StatusRecord>> getKeys() {
        return Arrays.<UniqueKey<StatusRecord>>asList(Keys.KEY_STATUS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<StatusRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<StatusRecord, ?>>asList(Keys.STATUS_IBFK_2, Keys.STATUS_IBFK_1);
    }

    public Job job() {
        return new Job(this, Keys.STATUS_IBFK_2);
    }

    public StatusType statusType() {
        return new StatusType(this, Keys.STATUS_IBFK_1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Status as(String alias) {
        return new Status(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Status as(Name alias) {
        return new Status(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Status rename(String name) {
        return new Status(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Status rename(Name name) {
        return new Status(name, null);
    }
}
