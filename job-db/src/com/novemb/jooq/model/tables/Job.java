/*
 * This file is generated by jOOQ.
 */
package com.novemb.jooq.model.tables;


import com.novemb.jooq.model.Indexes;
import com.novemb.jooq.model.Jobs;
import com.novemb.jooq.model.Keys;
import com.novemb.jooq.model.tables.records.JobRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Job extends TableImpl<JobRecord> {

    private static final long serialVersionUID = 730736972;

    /**
     * The reference instance of <code>jobs.job</code>
     */
    public static final Job JOB = new Job();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JobRecord> getRecordType() {
        return JobRecord.class;
    }

    /**
     * The column <code>jobs.job.id</code>.
     */
    public final TableField<JobRecord, UInteger> ID = createField("id", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>jobs.job.job_name</code>.
     */
    public final TableField<JobRecord, String> JOB_NAME = createField("job_name", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>jobs.job.location_name</code>.
     */
    public final TableField<JobRecord, String> LOCATION_NAME = createField("location_name", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>jobs.job.url</code>.
     */
    public final TableField<JobRecord, String> URL = createField("url", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>jobs.job.company</code>.
     */
    public final TableField<JobRecord, String> COMPANY = createField("company", org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>jobs.job</code> table reference
     */
    public Job() {
        this(DSL.name("job"), null);
    }

    /**
     * Create an aliased <code>jobs.job</code> table reference
     */
    public Job(String alias) {
        this(DSL.name(alias), JOB);
    }

    /**
     * Create an aliased <code>jobs.job</code> table reference
     */
    public Job(Name alias) {
        this(alias, JOB);
    }

    private Job(Name alias, Table<JobRecord> aliased) {
        this(alias, aliased, null);
    }

    private Job(Name alias, Table<JobRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Job(Table<O> child, ForeignKey<O, JobRecord> key) {
        super(child, key, JOB);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Jobs.JOBS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.JOB_JOB_LOCATION_NAME_FK, Indexes.JOB_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<JobRecord, UInteger> getIdentity() {
        return Keys.IDENTITY_JOB;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<JobRecord> getPrimaryKey() {
        return Keys.KEY_JOB_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<JobRecord>> getKeys() {
        return Arrays.<UniqueKey<JobRecord>>asList(Keys.KEY_JOB_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<JobRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<JobRecord, ?>>asList(Keys.JOB_LOCATION_NAME_FK);
    }

    public Location location() {
        return new Location(this, Keys.JOB_LOCATION_NAME_FK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Job as(String alias) {
        return new Job(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Job as(Name alias) {
        return new Job(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Job rename(String name) {
        return new Job(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Job rename(Name name) {
        return new Job(name, null);
    }
}
